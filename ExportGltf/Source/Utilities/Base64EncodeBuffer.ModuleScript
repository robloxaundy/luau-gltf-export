{
 "className": "ModuleScript",
 "name": "Base64EncodeBuffer",
 "referent": "RBXc1aef2c609e14162b525fda19fa80a57",
 "properties": {
  "AttributesSerialize": {
   "_propertyType": "BinaryString",
   "values": {}
  },
  "Tags": {
   "_propertyType": "BinaryString",
   "values": {}
  },
  "Capabilities": {
   "_propertyType": "SecurityCapabilities",
   "values": {
    "_": "0"
   }
  },
  "DefinesCapabilities": {
   "_propertyType": "bool",
   "values": {
    "_": "false"
   }
  },
  "LinkedSource": {
   "_propertyType": "Content",
   "values": {
    "null": [
     ""
    ]
   }
  },
  "Name": {
   "_propertyType": "string",
   "values": {
    "_": "Base64EncodeBuffer"
   }
  },
  "ScriptGuid": {
   "_propertyType": "string",
   "values": {
    "_": "{85194b2d-ca48-44f9-8e2d-9ff1a2b9a5d6}"
   }
  },
  "Source": {
   "_propertyType": "ProtectedString",
   "values": {
    "_": "--[[\n\tInput buffer byte count should be a multiple 3\n]]\n\n\nlocal BASE64_CHARACTERS = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\n\t'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0',\n\t'1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'}\n\n\nlocal _00111111 = 63\n\nreturn function(bufferInput, prefix, bufferLength)\n\tlocal bufferLength = bufferLength or buffer.len(bufferInput)\n\tlocal resultTable = {prefix}\n\t\n\tif bufferLength % 3 ~= 0 then\n\t\terror(\"Buffer length must be a multiple of 3\")\n\tend\n\t\n\tfor i = 0, bufferLength - 1, 3 do\n\t\t-- Addapted from https://en.wikibooks.org/wiki/Algorithm_Implementation/Miscellaneous/Base64\n\t\t\n\t\t-- these three 8-bit (ASCII) characters become one 24-bit number\n\t\tlocal combine = bit32.lshift(buffer.readu8(bufferInput, i), 16) +\n\t\t\t\t\t\tbit32.lshift(buffer.readu8(bufferInput, i + 1), 8) +\n\t\t\t\t\t\tbuffer.readu8(bufferInput, i + 2)\n\n\t\t-- this 24-bit number gets separated into four 6-bit numbers\n\t\ttable.insert(resultTable, BASE64_CHARACTERS[bit32.band(bit32.rshift(combine, 18), _00111111) + 1])\n\t\ttable.insert(resultTable, BASE64_CHARACTERS[bit32.band(bit32.rshift(combine, 12), _00111111) + 1])\n\t\ttable.insert(resultTable, BASE64_CHARACTERS[bit32.band(bit32.rshift(combine, 6), _00111111) + 1])\n\t\ttable.insert(resultTable, BASE64_CHARACTERS[bit32.band(combine, _00111111) + 1])\n\tend\n\t\n\treturn table.concat(resultTable)\nend"
   }
  },
  "SourceAssetId": {
   "_propertyType": "int64",
   "values": {
    "_": "-1"
   }
  }
 },
 "_exportInfo": "Exported with rbx-export v1.1.0. Contains all properties of this instance."
}